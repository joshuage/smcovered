{"ast":null,"code":"import axios from '../apis/smCovered';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (!localStorage.token) {\n    localStorage.setItem('token', ''); // setAuthToken(localStorage.token)          // @yuchen \n  }\n\n  try {\n    const res = await axios.get('/api/auth'); // @yuchen 最开始程序死在这里了; 现在改好了\n    // console.log(res.data);\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = (email, pwd, url) => async dispatch => {\n  const config = {\n    // @yuchen\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  console.log('from register');\n  console.log(email);\n  const body = JSON.stringify({\n    email,\n    pwd\n  });\n\n  try {\n    const {\n      data\n    } = await axios.post(`/api/${url}`, body, config); // @yuchen 是因为这里有body 记得传入url\n\n    console.log(data);\n    localStorage.setItem('what happened', data.token);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: data\n    }); //dispatch(loadUser());    // @yuchen redirect去哪里加个判断\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth/login', body, config); // console.log(res)\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    // console.log(err)\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout User\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/files/react_learning/projects/root/smcovered/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","setItem","res","get","type","payload","data","err","register","email","pwd","url","config","headers","console","log","body","JSON","stringify","post","errors","response","forEach","error","msg","login","password","logout"],"mappings":"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","sourcesContent":["import axios from '../apis/smCovered';\nimport { setAlert } from './alert'\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT\n} from './types';\nimport setAuthToken from '../utils/setAuthToken'\n\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if (!localStorage.token) {\n\t\tlocalStorage.setItem('token', '')\n    // setAuthToken(localStorage.token)          // @yuchen \n  }\n\n  try {\n    const res = await axios.get('/api/auth')  // @yuchen 最开始程序死在这里了; 现在改好了\n\n    // console.log(res.data);\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    })\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    })\n  }\n}\n\n// Register User\nexport const register = (email, pwd, url) => async dispatch => {\n  const config = {                            // @yuchen\n    headers: {\n      'Content-Type': 'application/json'\n    }\n\t}\n\tconsole.log('from register')\n\tconsole.log(email)\n  const body = JSON.stringify({ email, pwd})\n\n  try {\n    const { data } = await axios.post(`/api/${url}`, body, config)  // @yuchen 是因为这里有body 记得传入url\n\t\tconsole.log(data)\n\t\tlocalStorage.setItem('what happened', data.token)\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: data\n    });\n\n    //dispatch(loadUser());    // @yuchen redirect去哪里加个判断\n\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}\n\n// Login User\nexport const login = ( email, password ) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ email, password});\n\n  try {\n    const res = await axios.post('/api/auth/login', body, config);\n\n    // console.log(res)\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n\n    dispatch(loadUser());\n\n  } catch (err) {\n    // console.log(err)\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}\n\n// Logout User\nexport const logout = () => dispatch => {\n  dispatch({ type: LOGOUT })\n}"]},"metadata":{},"sourceType":"module"}