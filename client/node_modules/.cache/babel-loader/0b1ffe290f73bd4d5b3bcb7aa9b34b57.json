{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'; // import setAuthToken from './utils/setAuthToken';\n\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware))); // // set up a store subscription listener\n// // to store the users token in localStorage\n// // initialize current state from redux store for subscription comparison\n// // preventing undefined error\n// let currentState = store.getState();\n// store.subscribe(() => {\n//   // keep track of the previous and current state to compare changes\n//   let previousState = currentState;\n//   currentState = store.getState();\n//   // if the token changes set the value in localStorage and axios headers\n//   if (previousState.auth.token !== currentState.auth.token) {\n//     const token = currentState.auth.token;\n//     setAuthToken(token);\n//   }\n// });\n\nexport default store;","map":{"version":3,"sources":["/Users/files/react_learning/projects/root/smcovered/client/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","initialState","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,YAAxB,C,CACA;;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAG,CAACH,KAAD,CAAnB;AAEA,MAAMI,KAAK,GAAGP,WAAW,CACvBI,WADuB,EAEvBC,YAFuB,EAGvBH,mBAAmB,CAACD,eAAe,CAAC,GAAGK,UAAJ,CAAhB,CAHI,CAAzB,C,CAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n// import setAuthToken from './utils/setAuthToken';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\n// // set up a store subscription listener\n// // to store the users token in localStorage\n\n// // initialize current state from redux store for subscription comparison\n// // preventing undefined error\n// let currentState = store.getState();\n\n// store.subscribe(() => {\n//   // keep track of the previous and current state to compare changes\n//   let previousState = currentState;\n//   currentState = store.getState();\n//   // if the token changes set the value in localStorage and axios headers\n//   if (previousState.auth.token !== currentState.auth.token) {\n//     const token = currentState.auth.token;\n//     setAuthToken(token);\n//   }\n// });\n\nexport default store;\n\n"]},"metadata":{},"sourceType":"module"}