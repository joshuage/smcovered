{"ast":null,"code":"import axios from '../apis/smCovered';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\nimport setAuthToken from '../utils/setAuthToken'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth'); // @yuchen 最开始程序死在这里了; 现在改好了\n\n    console.log(res);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = (email, password) => async dispatch => {\n  const config = {\n    // @yuchen\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  console.log('from register');\n  console.log(email);\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/basicuser', body, config); // @yuchen 是因为这里有body，所以后面的req.body吗？\n\n    console.log(res.data);\n    setTimeout(() => console.log('timeout'), 10000);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    }); //dispatch(loadUser());    // @yuchen redirect去哪里加个判断\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth/login', body, config); // console.log(res)\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    // console.log(err)\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout User\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/files/react_learning/projects/root/smcovered/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","console","log","type","payload","data","err","register","email","password","config","headers","body","JSON","stringify","post","setTimeout","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from '../apis/smCovered';\nimport { setAlert } from './alert'\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT\n} from './types';\nimport setAuthToken from '../utils/setAuthToken'\n\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth')  // @yuchen 最开始程序死在这里了; 现在改好了\n\n    console.log(res);\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    })\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    })\n  }\n}\n\n// Register User\nexport const register = (email, password) => async dispatch => {\n  const config = {                            // @yuchen\n    headers: {\n      'Content-Type': 'application/json'\n    }\n\t}\n\tconsole.log('from register')\n\tconsole.log(email)\n  const body = JSON.stringify({ email, password});\n\n  try {\n    const res = await axios.post('/api/basicuser', body, config);  // @yuchen 是因为这里有body，所以后面的req.body吗？\n\n\t\tconsole.log(res.data)\n\n\t\tsetTimeout(()=>console.log('timeout'), 10000)\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n\n    //dispatch(loadUser());    // @yuchen redirect去哪里加个判断\n\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}\n\n// Login User\nexport const login = ( email, password ) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({ email, password});\n\n  try {\n    const res = await axios.post('/api/auth/login', body, config);\n\n    // console.log(res)\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n\n    dispatch(loadUser());\n\n  } catch (err) {\n    // console.log(err)\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'error')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}\n\n// Logout User\nexport const logout = () => dispatch => {\n  dispatch({ type: LOGOUT })\n}"]},"metadata":{},"sourceType":"module"}