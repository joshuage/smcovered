{"ast":null,"code":"var _jsxFileName = \"/Users/files/react_learning/projects/smcovered/client/src/components/App.js\";\nimport React, { useEffect, useState } from 'react';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      myChart: 'default',\n      data: '跟踪你的data然后重新render'\n    };\n  }\n\n  componentDidMount() {\n    if (typeof myChart === chart) {\n      myChart.destory;\n    }\n\n    var ctx = document.getElementById('canvas').getContext('2d');\n    console.log(ctx); // 可以用的试过了\n\n    myChart = APIs(ctx); // 剩下的直接render就好了\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 4\n      }\n    }, \"yes\");\n  }\n\n} // \treturn (\n// \t\t<div>do u update: {a}</div>\n// \t)\n// \t// render() {\n// \t// \treturn (\n// \t// \t\t<div>This is Appp</div>\n// \t// \t)\n// \t// }\n// }\n\n\nexport default App;","map":{"version":3,"sources":["/Users/files/react_learning/projects/smcovered/client/src/components/App.js"],"names":["React","useEffect","useState","App","Component","state","myChart","data","componentDidMount","chart","destory","ctx","document","getElementById","getContext","console","log","APIs","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAAA;AAAA;AAAA,SACjCC,KADiC,GACzB;AAACC,MAAAA,OAAO,EAAE,SAAV;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,KADyB;AAAA;;AAEjCC,EAAAA,iBAAiB,GAAG;AACnB,QAAI,OAAOF,OAAP,KAAmBG,KAAvB,EAA6B;AAC5BH,MAAAA,OAAO,CAACI,OAAR;AACA;;AACD,QAAIC,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,UAAlC,CAA6C,IAA7C,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ,EALmB,CAKF;;AACjBL,IAAAA,OAAO,GAAGW,IAAI,CAACN,GAAD,CAAd,CANmB,CAOnB;AACA;;AAEDO,EAAAA,MAAM,GAAG;AACR,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADD;AAGA;;AAhBgC,C,CAsBlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAef,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nclass App extends React.Component {\n\tstate = {myChart: 'default', data: '跟踪你的data然后重新render'}\n\tcomponentDidMount() {\n\t\tif (typeof myChart === chart){\n\t\t\tmyChart.destory\n\t\t}\n\t\tvar ctx = document.getElementById('canvas').getContext('2d')\n\t\tconsole.log(ctx) // 可以用的试过了\n\t\tmyChart = APIs(ctx)\n\t\t// 剩下的直接render就好了\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>yes</div>\n\t\t)\n\t}\n}\n\n\n\n\n// \treturn (\n// \t\t<div>do u update: {a}</div>\n// \t)\n// \t// render() {\n// \t// \treturn (\n// \t// \t\t<div>This is Appp</div>\n// \t// \t)\n// \t// }\n// }\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}